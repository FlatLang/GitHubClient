package flat/github

import flat/github/models

import flat/http
import flat/json
import flat/datastruct

class {
  static String API_ROOT = "https://api.github.com"

  static async pagingRequest<TType>(
    String url,
    mapper(HashMap<String, Object> map) -> TType,
    String token = null,
    String dataKey = null
  ) -> TType[] {
    var Int page = 1
    let perPage = 100

    let values = TType[]

    while (true) {
      let pagingUrl = "#{url}?page=#{page++}&per_page=#{perPage}"
      let headers = HashMap()
        :add("Accept", "application/json")
        :add("Content-Type", "text/plain")
        :add("User-Agent", "flat-github-client")

      if (token) {
        headers.add("Authorization", "Bearer #{token}")
      }

      let response = Http.get(pagingUrl, headers: headers)

      Object parsed = JsonDeserializer().parse(response.data)
      var Array<HashMap<String, Object>> data

      if (dataKey) {
        let HashMap<String, Object> map = (HashMap)parsed
        data = (Array)map[dataKey]
      } else {
        data = (Array)parsed
      }

      values.addAll(data.map(mapper))

      if (data.count < perPage) break
    }

    return values
  }

  public static async getOrganizationRepos(String organization, String token = null) -> Repo[] {
    return pagingRequest("#{API_ROOT}/orgs/#{organization}/repos", { Repo(_) }, token)
  }

  public static async getRepositoryWorkflows(String organization, String repository, String token = null) -> Workflow[] {
    return pagingRequest("#{API_ROOT}/repos/#{organization}/#{repository}/actions/workflows", { Workflow(_) }, token, "workflows")
  }
}
